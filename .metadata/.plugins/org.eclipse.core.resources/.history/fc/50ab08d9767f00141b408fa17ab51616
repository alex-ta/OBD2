package com.example.bluetooth; 
import java.util.concurrent.ExecutionException;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

public class ConnectionActivity extends Activity{
	/**
	 * Diese Activity kümmert sich um den Datenaustausch zwischen Handy und Gerät.
	 * Sie verfügt über ein UserInterface zum Teste, dies Klasse wird nicht in der 
	 * eigentlichen App benötigt und dient nur zum Testen.
	 * */
	
	private BluetoothStream stream;
	private ListView list;
	private ArrayAdapter<String> adapter;
	private Handler guiHandler;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.input_check);
		list = (ListView) findViewById(R.id.expandableListView_icheck);
		adapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1, 0);
		list.setAdapter(adapter);
		guiHandler = new Handler();
		try {
			stream = new BluetoothStream(MainActivity.bluesocket);
		} catch (SocketError e) {
			Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
		}
		
		new BgListener().start();
		new BgSend(4000).start();
	}
	
	public String sendMsg (){
		stream.write(OBD2E.SMARTINIT);
		String num = OBD2E.Msg(OBD2E.M1_2_PID_SPEED);
		stream.write(num);
		return num;
	}
	
	private void addMsg(final String msg){
		if(msg != " \n ")
		guiHandler.post(new Runnable(){
			@Override
			public void run(){
				adapter.add(msg);	
			}
			
		});
	}
	
	private void addMsg(byte[] msg){
		final String msgint = Casts.getInt(msg)+"<-int";
		final String msgchar = Casts.getString(msg)+"<-char";
		
		if(msgint != " \n " && msgchar != " \n " )
		guiHandler.post(new Runnable(){
			@Override
			public void run(){
				adapter.add(msgint);
				adapter.add(msgchar);
			}
			
		});
	}
	
	
	private class BgListener extends Thread{
 
		public boolean running;
		
		public BgListener(){
			running = true;
			}
		
		@Override
		public void run() {
			super.run();
			while(running){
				// casted to the specific Datatype -> may be fuel
				byte[] msg = stream.read();
				addMsg(msg);	
				msg = stream.read();
				addMsg(msg);
			}
		}
	}
	
	private class BgSend extends Thread{
		
		public boolean running;
		private int time;
		private InitOBD2 init = new InitOBD2();
		
		
		public BgSend(int time){
			running = true;
			this.time = time;
			}
		
		
		@Override
		public void run() {
			super.run();
			
			init.doInBackground(stream);
			try {
				init.get();
			} catch (InterruptedException | ExecutionException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			while(running){
				addMsg("_____");
				addMsg("wrote: "+sendMsg());
				try {
					synchronized(this){
					this.wait(time);}
				} catch (InterruptedException e) {
					Log.e("waiting error", "stopped");
				}
				
			}
		}
	}
}

